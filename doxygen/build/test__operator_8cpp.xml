<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__operator_8cpp" kind="file" language="C++">
    <compoundname>test_operator.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="parser_8hpp" local="no">polaris/parser/parser.hpp</includes>
    <includes local="no">geometry_msgs/msg/quaternion.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="156">
        <label>functional</label>
      </node>
      <node id="151">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="146">
        <label>peglib.h</label>
      </node>
      <node id="141">
        <label>string</label>
      </node>
      <node id="148">
        <label>exception</label>
      </node>
      <node id="155">
        <label>boost/any.hpp</label>
      </node>
      <node id="137">
        <label>/home/runner/work/polaris/polaris/test/test_operator.cpp</label>
        <link refid="test__operator_8cpp"/>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>vector</label>
      </node>
      <node id="138">
        <label>gtest/gtest.h</label>
      </node>
      <node id="139">
        <label>polaris/parser/parser.hpp</label>
        <link refid="parser_8hpp_source"/>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
      </node>
      <node id="158">
        <label>utility</label>
      </node>
      <node id="149">
        <label>sstream</label>
      </node>
      <node id="144">
        <label>polaris/built_in_functions/functions.hpp</label>
        <link refid="functions_8hpp_source"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>iostream</label>
      </node>
      <node id="140">
        <label>polaris/types/type_base.hpp</label>
        <link refid="type__base_8hpp_source"/>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>polaris/types/entity.hpp</label>
        <link refid="entity_8hpp_source"/>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>unordered_map</label>
      </node>
      <node id="154">
        <label>boost/optional.hpp</label>
      </node>
      <node id="153">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="142">
        <label>type_traits</label>
      </node>
      <node id="145">
        <label>polaris/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__operator_8cpp_1a22da5e02aac841eb06f7f3fce64b8994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, addition0)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>addition0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="24" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a5a77243e83e87887d03228cb6ff08984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, addition1)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>addition1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="33" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1aa567531ae8c0e7d4e6cfdcd1fcae6d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, addition2)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>addition2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="42" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a373617d3864a4b61f473809c496886d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, addition3)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>addition3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="51" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a1da8e22dc280d3bd1fb95ed810749664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, subtraction0)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>subtraction0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="60" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1aa1710bf0d2f04e9625fcfe4e1efe35fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, subtraction1)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>subtraction1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="69" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="69" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1affbe6b85a99e2abe4a240556570cb462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, subtraction2)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>subtraction2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="78" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a4e47a99b1d5671117b55023d564a6559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, subtraction3)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>subtraction3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="87" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1ae2bdc4fe1c07622a91fb1ac70316a076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, multiplication0)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>multiplication0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="96" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1aa6dec5337e8bc1960d719627bf4d5ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, multiplication1)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>multiplication1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="105" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1add81ae8c7ee73453ae22a28bc49080ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, multiplication2)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>multiplication2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="114" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a6e3753881881392c95bf228693677f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, multiplication3)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>multiplication3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="123" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a2e8bed5cc251857108b9e5be763c9af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, division0)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>division0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="132" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a850d0aef9d19cf3b67ba66e95d0b86b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, division1)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>division1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="141" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1aedf21d851b95b6f947683c6b7c843f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, division2)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>division2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="150" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a549d6da28140de06a9af72ae456ac5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, division3)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>division3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="159" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1ad8789a94268bfd9a837af25389498739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(operator, quaternion0)</argsstring>
        <name>TEST</name>
        <param>
          <type>operator</type>
        </param>
        <param>
          <type>quaternion0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="168" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="test__operator_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp" line="180" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_operator.cpp" bodystart="180" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>OUXT-Polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/parser/parser.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/quaternion.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>addition0)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1.0<sp/>+<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>4.0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>addition1)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>+<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>4.0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>addition2)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>+<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>4.0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>addition3)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>-1<sp/>+<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>2.0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>subtraction0)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1.0<sp/>-<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-2.0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>subtraction1)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>-<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-2.0);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>subtraction2)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>-<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-2.0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>subtraction3)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>-1<sp/>-<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-4.0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>multiplication0)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1.0<sp/>*<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>3.0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>multiplication1)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>*<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>3.0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>multiplication2)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>*<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>3.0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>multiplication3)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>-1<sp/>*<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-3.0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>division0)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1.0<sp/>/<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>division1)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>/<sp/>3.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>division2)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1<sp/>/<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>division3)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>-1<sp/>/<sp/>double(3.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>-1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">TEST(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">,<sp/>quaternion0)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>rpy(0,0,0)*quaternion(0.1,0,0.0,1);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Quaternion&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().x,<sp/>0.1);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().y,<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().z,<sp/>0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().w,<sp/>1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/polaris/polaris/test/test_operator.cpp"/>
  </compounddef>
</doxygen>
