<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="functions_8hpp" kind="file" language="C++">
    <compoundname>functions.hpp</compoundname>
    <includes refid="exception_8hpp" local="no">polaris/exception.hpp</includes>
    <includes refid="type__base_8hpp" local="no">polaris/types/type_base.hpp</includes>
    <includes refid="entity_8hpp" local="no">polaris/types/entity.hpp</includes>
    <includes refid="task_8hpp" local="no">polaris/types/task/task.hpp</includes>
    <includes local="no">peglib.h</includes>
    <includes local="no">geometry_msgs/msg/pose.hpp</includes>
    <includes local="no">geometry_msgs/msg/quaternion.hpp</includes>
    <includes local="no">boost/optional.hpp</includes>
    <includes local="no">boost/any.hpp</includes>
    <includes local="no">functional</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includedby refid="parser_8hpp" local="no">/home/runner/work/polaris/polaris/include/polaris/parser/parser.hpp</includedby>
    <includedby refid="functions_8cpp" local="no">/home/runner/work/polaris/polaris/src/built_in_functions/functions.cpp</includedby>
    <includedby refid="parser_8cpp" local="no">/home/runner/work/polaris/polaris/src/parser/parser.cpp</includedby>
    <incdepgraph>
      <node id="18">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="26">
        <label>functional</label>
      </node>
      <node id="20">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="19">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="11">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="21">
        <label>boost/graph/graphviz.hpp</label>
      </node>
      <node id="2">
        <label>peglib.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="25">
        <label>boost/any.hpp</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="28">
        <label>utility</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="0">
        <label>/home/runner/work/polaris/polaris/include/polaris/built_in_functions/functions.hpp</label>
        <link refid="functions_8hpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>polaris/types/type_base.hpp</label>
        <link refid="type__base_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>polaris/types/entity.hpp</label>
        <link refid="entity_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>unordered_map</label>
      </node>
      <node id="22">
        <label>mutex</label>
      </node>
      <node id="13">
        <label>polaris/types/task/task.hpp</label>
        <link refid="task_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>boost/optional.hpp</label>
      </node>
      <node id="23">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="14">
        <label>polaris/types/task/state_machine.hpp</label>
        <link refid="state__machine_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="1">
        <label>polaris/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>boost/graph/graph_utility.hpp</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="30">
        <label>/home/runner/work/polaris/polaris/include/polaris/parser/parser.hpp</label>
        <link refid="parser_8hpp_source"/>
      </node>
      <node id="29">
        <label>/home/runner/work/polaris/polaris/include/polaris/built_in_functions/functions.hpp</label>
        <link refid="functions_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpolaris_1_1built__in__functions_1_1Functions" prot="public">polaris::built_in_functions::Functions</innerclass>
    <innernamespace refid="namespacepolaris">polaris</innernamespace>
    <innernamespace refid="namespacepolaris_1_1built__in__functions">polaris::built_in_functions</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>OUXT-Polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>POLARIS__BUILT_IN_FUNCTIONS__FUNCTIONS_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POLARIS__BUILT_IN_FUNCTIONS__FUNCTIONS_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/types/type_base.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/types/entity.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/types/task/task.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;peglib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/pose.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/quaternion.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/optional.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/any.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolaris" kindref="compound">polaris</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">built_in_functions</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41" refid="classpolaris_1_1built__in__functions_1_1Functions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpolaris_1_1built__in__functions_1_1Functions" kindref="compound">Functions</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1built__in__functions_1_1Functions" kindref="compound">Functions</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructInteger,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;INTEGER&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructInteger,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructDouble,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;DOUBLE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructDouble,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructString,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructBoolean,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructBoolean,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;BOOLEAN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructBoolean,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;STRING&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructString,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructArray,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;ARRAY&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructArray,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;quaternion&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructQuaternion,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;rpy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructQuaternionFromRpy,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;point&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructPoint,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;pose&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructPose,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;entity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::constructEntity,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::addition,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::subtraction,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::multiplication,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::division,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_.insert(std::make_pair(</highlight><highlight class="stringliteral">&quot;IDENTIFIER&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;Functions::fetchVariable,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1)));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>boost::any<sp/>evaluate(std::string<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>std::shared_ptr&lt;peg::Ast&gt;<sp/>ast)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ast-&gt;name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;PREFIX_EXPR&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ast-&gt;nodes[0]-&gt;token<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>evaluate(ast-&gt;nodes[1]-&gt;name,<sp/>ast-&gt;nodes[1]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(boost::none))<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;double&gt;</ref>))<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;double&gt;</ref><sp/>double_value<sp/>=<sp/>boost::any_cast&lt;<ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;double&gt;</ref>&gt;(ret);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double_value.setValue(-1<sp/>*<sp/>double_value.getValue());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>double_value;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;int&gt;</ref>))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;int&gt;</ref><sp/>int_value<sp/>=<sp/>boost::any_cast&lt;<ref refid="classpolaris_1_1types_1_1TypeBase" kindref="compound">types::TypeBase&lt;int&gt;</ref>&gt;(ret);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_value.setValue(-1<sp/>*<sp/>int_value.getValue());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int_value;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ast-&gt;name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CALL&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>evaluate(ast-&gt;nodes[0]-&gt;token,<sp/>ast-&gt;nodes[1]);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(boost::none))<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variables_.count(ast-&gt;nodes[0]-&gt;token)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>variables_[ast-&gt;nodes[0]-&gt;token];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functions_.count(</highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POLARIS_THROW_EVALUATION_ERROR(ast,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>did<sp/>not<sp/>defined<sp/>yet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>functions_[</highlight><highlight class="keyword">function</highlight><highlight class="normal">](ast);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setVariables(std::unordered_map&lt;std::string,<sp/>boost::any&gt;<sp/>variables)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>variables_<sp/>=<sp/>variables;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>boost::any&gt;<sp/>variables_;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;boost::any(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast)&gt;&gt;<sp/>functions_;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructBoolean(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructString(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructInteger(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructDouble(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructQuaternion(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructQuaternionFromRpy(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructPoint(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructPose(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructArray(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>boost::any<sp/>constructEntity(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>boost::any<sp/>addition(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>boost::any<sp/>subtraction(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>boost::any<sp/>multiplication(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>boost::any<sp/>division(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>boost::any<sp/>fetchVariable(std::shared_ptr&lt;peg::Ast&gt;<sp/>ast);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>built_in_functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>POLARIS__BUILT_IN_FUNCTIONS__FUNCTIONS_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/polaris/polaris/include/polaris/built_in_functions/functions.hpp"/>
  </compounddef>
</doxygen>
