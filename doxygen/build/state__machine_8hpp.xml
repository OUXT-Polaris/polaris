<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="state__machine_8hpp" kind="file" language="C++">
    <compoundname>state_machine.hpp</compoundname>
    <includes local="no">boost/graph/adjacency_list.hpp</includes>
    <includes local="no">boost/graph/graph_utility.hpp</includes>
    <includes local="no">boost/property_tree/ptree.hpp</includes>
    <includes local="no">boost/property_tree/xml_parser.hpp</includes>
    <includes local="no">boost/foreach.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">boost/graph/graphviz.hpp</includes>
    <includes local="no">mutex</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="task_8hpp" local="no">/home/runner/work/polaris/polaris/include/polaris/types/task/task.hpp</includedby>
    <includedby refid="state__machine_8cpp" local="no">/home/runner/work/polaris/polaris/src/types/task/state_machine.cpp</includedby>
    <incdepgraph>
      <node id="88">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="90">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="89">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="91">
        <label>boost/graph/graphviz.hpp</label>
      </node>
      <node id="93">
        <label>string</label>
      </node>
      <node id="94">
        <label>vector</label>
      </node>
      <node id="87">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="92">
        <label>mutex</label>
      </node>
      <node id="84">
        <label>/home/runner/work/polaris/polaris/include/polaris/types/task/state_machine.hpp</label>
        <link refid="state__machine_8hpp"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="86">
        <label>boost/graph/graph_utility.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="99">
        <label>/home/runner/work/polaris/polaris/include/polaris/types/task/task_planner.hpp</label>
        <link refid="task__planner_8hpp_source"/>
      </node>
      <node id="98">
        <label>/home/runner/work/polaris/polaris/include/polaris/parser/parser.hpp</label>
        <link refid="parser_8hpp_source"/>
      </node>
      <node id="97">
        <label>/home/runner/work/polaris/polaris/include/polaris/built_in_functions/functions.hpp</label>
        <link refid="functions_8hpp_source"/>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>/home/runner/work/polaris/polaris/include/polaris/types/task/task.hpp</label>
        <link refid="task_8hpp_source"/>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>/home/runner/work/polaris/polaris/include/polaris/types/task/state_machine.hpp</label>
        <link refid="state__machine_8hpp"/>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpolaris_1_1types_1_1TransitionProperty" prot="public">polaris::types::TransitionProperty</innerclass>
    <innerclass refid="structpolaris_1_1types_1_1StateProperty" prot="public">polaris::types::StateProperty</innerclass>
    <innerclass refid="structpolaris_1_1types_1_1StateInfo" prot="public">polaris::types::StateInfo</innerclass>
    <innerclass refid="classpolaris_1_1types_1_1StateMachine" prot="public">polaris::types::StateMachine</innerclass>
    <innernamespace refid="namespacepolaris">polaris</innernamespace>
    <innernamespace refid="namespacepolaris_1_1types">polaris::types</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>OUXT-Polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>POLARIS__TYPES__TASK__STATE_MACHINE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POLARIS__TYPES__TASK__STATE_MACHINE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>headers<sp/>in<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/adjacency_list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/graph_utility.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/property_tree/ptree.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/property_tree/xml_parser.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/foreach.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/graphviz.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>headers<sp/>in<sp/>STL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolaris" kindref="compound">polaris</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">types</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="structpolaris_1_1types_1_1TransitionProperty" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpolaris_1_1types_1_1TransitionProperty" kindref="compound">TransitionProperty</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::string<sp/>trigger_event;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::string<sp/>from_state;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::string<sp/>to_state;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structpolaris_1_1types_1_1StateProperty" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpolaris_1_1types_1_1StateProperty" kindref="compound">StateProperty</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::adjacency_list&lt;boost::listS,<sp/>boost::vecS,<sp/>boost::bidirectionalS,<sp/><ref refid="structpolaris_1_1types_1_1StateProperty" kindref="compound">StateProperty</ref>,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpolaris_1_1types_1_1TransitionProperty" kindref="compound">TransitionProperty</ref>&gt;<sp/>graph_t;</highlight></codeline>
<codeline lineno="66"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>graph_t::vertex_descriptor<sp/>vertex_t;</highlight></codeline>
<codeline lineno="71"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>graph_t::edge_descriptor<sp/>edge_t;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::graph_traits&lt;graph_t&gt;::adjacency_iterator<sp/>adjacency_iterator_t;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::graph_traits&lt;graph_t&gt;::out_edge_iterator<sp/>out_edge_iterator_t;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structpolaris_1_1types_1_1StateInfo" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpolaris_1_1types_1_1StateInfo" kindref="compound">StateInfo</ref></highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85" refid="structpolaris_1_1types_1_1StateInfo_1a9a980d076f0d83b22644e45f80b56d7a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpolaris_1_1types_1_1StateInfo_1a9a980d076f0d83b22644e45f80b56d7a" kindref="member">current_state</ref>;</highlight></codeline>
<codeline lineno="90" refid="structpolaris_1_1types_1_1StateInfo_1a2bce5f435fc4dcebc16e16ce0e4c2afc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="structpolaris_1_1types_1_1StateInfo_1a2bce5f435fc4dcebc16e16ce0e4c2afc" kindref="member">possible_transition_states</ref>;</highlight></codeline>
<codeline lineno="95" refid="structpolaris_1_1types_1_1StateInfo_1a448b06b9d06108af1a87e8211e87260b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="structpolaris_1_1types_1_1StateInfo_1a448b06b9d06108af1a87e8211e87260b" kindref="member">possible_transitions</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="structpolaris_1_1types_1_1StateInfo" kindref="compound">StateInfo</ref>(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>current_state_,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>possible_transition_states_,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>possible_transitions_)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>:<sp/>current_state(current_state_),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>possible_transition_states(possible_transition_states_),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>possible_transitions(possible_transitions_)<sp/>{}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classpolaris_1_1types_1_1StateMachine" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpolaris_1_1types_1_1StateMachine" kindref="compound">StateMachine</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpolaris_1_1types_1_1StateMachine" kindref="compound">StateMachine</ref>(std::string<sp/>xml_string);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>~<ref refid="classpolaris_1_1types_1_1StateMachine" kindref="compound">StateMachine</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tryTransition(std::string<sp/>trigger_event_name);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setCurrentState(std::string<sp/>current_state);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>getPossibeTransitionStates();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>getPossibeTransitions();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::string<sp/>getCurrentState();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="structpolaris_1_1types_1_1StateInfo" kindref="compound">StateInfo</ref><sp/>getStateInfo();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::string<sp/>getName();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTransition(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>from_state_name,<sp/>std::string<sp/>to_state_name,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>trigger_event_name);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>std::mutex<sp/>mtx_;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>graph_t<sp/>state_graph_;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>vertex_t<sp/>current_state_;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::string<sp/>name_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>POLARIS__TYPES__TASK__STATE_MACHINE_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/polaris/polaris/include/polaris/types/task/state_machine.hpp"/>
  </compounddef>
</doxygen>
