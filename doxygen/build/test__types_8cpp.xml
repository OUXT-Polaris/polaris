<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__types_8cpp" kind="file" language="C++">
    <compoundname>test_types.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="parser_8hpp" local="no">polaris/parser/parser.hpp</includes>
    <includes local="no">geometry_msgs/msg/point.hpp</includes>
    <includes local="no">geometry_msgs/msg/quaternion.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="305">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="313">
        <label>functional</label>
      </node>
      <node id="307">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="306">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="298">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="308">
        <label>boost/graph/graphviz.hpp</label>
      </node>
      <node id="293">
        <label>peglib.h</label>
      </node>
      <node id="288">
        <label>string</label>
      </node>
      <node id="295">
        <label>exception</label>
      </node>
      <node id="284">
        <label>/home/runner/work/polaris/polaris/test/test_types.cpp</label>
        <link refid="test__types_8cpp"/>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>boost/any.hpp</label>
      </node>
      <node id="316">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="299">
        <label>vector</label>
      </node>
      <node id="285">
        <label>gtest/gtest.h</label>
      </node>
      <node id="286">
        <label>polaris/parser/parser.hpp</label>
        <link refid="parser_8hpp_source"/>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>utility</label>
      </node>
      <node id="296">
        <label>sstream</label>
      </node>
      <node id="291">
        <label>polaris/built_in_functions/functions.hpp</label>
        <link refid="functions_8hpp_source"/>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="290">
        <label>iostream</label>
      </node>
      <node id="287">
        <label>polaris/types/type_base.hpp</label>
        <link refid="type__base_8hpp_source"/>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>polaris/types/entity.hpp</label>
        <link refid="entity_8hpp_source"/>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>unordered_map</label>
      </node>
      <node id="309">
        <label>mutex</label>
      </node>
      <node id="300">
        <label>polaris/types/task/task.hpp</label>
        <link refid="task_8hpp_source"/>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>boost/optional.hpp</label>
      </node>
      <node id="310">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="301">
        <label>polaris/types/task/state_machine.hpp</label>
        <link refid="state__machine_8hpp_source"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
      </node>
      <node id="289">
        <label>type_traits</label>
      </node>
      <node id="302">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="292">
        <label>polaris/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>boost/graph/graph_utility.hpp</label>
      </node>
      <node id="294">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__types_8cpp_1ab990a17a474510109179efece64e08a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, empty)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>empty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="25" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a39b7c3d596e433ed24ad285029c59a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, double_type)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>double_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="31" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="31" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1abde4fe5a1ccab265acacd80830057bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, quaternion_type_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>quaternion_type_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="46" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a01aee4bab8461962b7556c3727df5601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, quaternion_type_1)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>quaternion_type_1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="58" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="58" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1ab1ab0f47ec92f9bc3676733724e2c4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, point_type_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>point_type_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="75" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1ab9f656010cb57c5c19f97ff20255c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, pose_type_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>pose_type_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="86" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="86" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a4957feacc90dab5b47755a9e532e184f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, pose_type_1)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>pose_type_1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="101" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="101" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a81c5903dc75e6f72328edd3b206c17a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, pose_type_2)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>pose_type_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="116" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="116" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1acd2237748f3688c556a54819609c1bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, string_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>string_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="131" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1af77a463e2e62704cb9b88d24642762ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, string_1)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>string_1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="141" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1aa5903635d1ebf52efd400716411b161c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, bool_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>bool_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="151" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="151" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a88a89d961b82c5e5df19b6988cdfb92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, bool_1)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>bool_1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="161" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="161" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1ae1b01d93064b2cd772d302e3ff914034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, bool_2)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>bool_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="171" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="171" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1ae58fc79269a5643fc8c3f532ce0e8873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, entity_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>entity_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="181" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="181" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1ad6537c2a8351b56d317e17fa7b037107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_0)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="207" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="207" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a3185d78708adae8be891a4a17f86fda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_1)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="220" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a59378da6e999094b8caca7f81337d294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_2)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="234" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="234" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a2b993545dc8a9a102c2c70e01b70f48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_3)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="246" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="246" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a23ae1693125f75a0735bf8c68a689c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_4)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="262" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="262" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a8466fc10986a835508b340e85508079d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_5)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_5</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="278" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="278" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a8d9f6cc5ecc3629fd4671681b4e84597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(types, array_6)</argsstring>
        <name>TEST</name>
        <param>
          <type>types</type>
        </param>
        <param>
          <type>array_6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="312" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="312" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="test__types_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/polaris/polaris/test/test_types.cpp" line="324" column="1" bodyfile="/home/runner/work/polaris/polaris/test/test_types.cpp" bodystart="324" bodyend="328"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>OUXT-Polaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;polaris/parser/parser.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/point.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/quaternion.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">TEST(types,<sp/>empty)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">TEST(types,<sp/>double_type)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>1.0;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get(),<sp/>1.0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;1;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;1.5;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;-1.2;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;-1.2a;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;a3;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;a;3;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">TEST(types,<sp/>quaternion_type_0)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>quaternion(0.0,0.0,0.0,1.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Quaternion&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().x,<sp/>0.0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().y,<sp/>0.0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().z,<sp/>0.0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().w,<sp/>1.0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">TEST(types,<sp/>quaternion_type_1)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>w<sp/>=<sp/>1.0;let<sp/>a<sp/>=<sp/>quaternion(double(0.0),0,0.0,w);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Quaternion&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().x,<sp/>0.0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().y,<sp/>0.0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().z,<sp/>0.0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().w,<sp/>1.0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(w);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(w.get(),<sp/>1.0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(x);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TEST(types,<sp/>point_type_0)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>point(0.0,0.0,1.0);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Point&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().x,<sp/>0.0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().y,<sp/>0.0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().z,<sp/>1.0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">TEST(types,<sp/>pose_type_0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>a<sp/>=<sp/>pose(point(1,2,3),quaternion(0,0,0,1));&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Pose&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.x,<sp/>1.0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.y,<sp/>2.0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.z,<sp/>3.0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.x,<sp/>0.0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.y,<sp/>0.0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.z,<sp/>0.0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.w,<sp/>1.0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">TEST(types,<sp/>pose_type_1)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>p<sp/>=<sp/>point(1,2,3);let<sp/>a<sp/>=<sp/>pose(p,quaternion(0,0,0,1));&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Pose&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.x,<sp/>1.0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.y,<sp/>2.0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.z,<sp/>3.0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.x,<sp/>0.0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.y,<sp/>0.0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.z,<sp/>0.0);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.w,<sp/>1.0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">TEST(types,<sp/>pose_type_2)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(parser.evaluate(</highlight><highlight class="stringliteral">&quot;let<sp/>q<sp/>=<sp/>quaternion(0,0,0,1);let<sp/>a<sp/>=<sp/>pose(point(1,2,3),q);&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;geometry_msgs::msg::Pose&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.x,<sp/>1.0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.y,<sp/>2.0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().position.z,<sp/>3.0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.x,<sp/>0.0);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.y,<sp/>0.0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.z,<sp/>0.0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().orientation.w,<sp/>1.0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">TEST(types,<sp/>string_0)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>string(&quot;test&quot;);)&quot;;</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TEST(types,<sp/>string_1)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>&quot;test&quot;;)&quot;;</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">TEST(types,<sp/>bool_0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>true;)&quot;;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">TEST(types,<sp/>bool_1)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>false;)&quot;;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">TEST(types,<sp/>bool_2)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>bool(true);)&quot;;</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">TEST(types,<sp/>entity_0)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>entity(pose(point(1,2,3),quaternion(0,0,0,1)),<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[&quot;bouy&quot;],<sp/>[point(0,1,2),<sp/>point(2,3,4),<sp/>point(3,2,3)]);)&quot;;</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;<ref refid="classpolaris_1_1types_1_1Entity" kindref="compound">polaris::types::Entity</ref>&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.x,<sp/>1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.y,<sp/>2);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.z,<sp/>3);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().type.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get().type[0].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;bouy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().polygon.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].x,<sp/>0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].y,<sp/>1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].z,<sp/>2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].x,<sp/>2);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].y,<sp/>3);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].z,<sp/>4);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].x,<sp/>3);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].y,<sp/>2);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].z,<sp/>3);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">TEST(types,<sp/>array_0)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>[1,2,3];)&quot;;</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;int&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get()[0],<sp/>1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get()[1],<sp/>2);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get()[2],<sp/>3);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">TEST(types,<sp/>array_1)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>[1.0,2.9,3.0,12.0];)&quot;;</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;double&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(4));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0],<sp/>1.0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1],<sp/>2.9);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[2],<sp/>3.0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[3],<sp/>12.0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">TEST(types,<sp/>array_2)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a<sp/>=<sp/>[&quot;a&quot;,&quot;b&quot;];)&quot;;</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;std::string&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get()[0].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get()[1].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">TEST(types,<sp/>array_3)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a=[point(1,2,3),<sp/>point(1,2,5)];)&quot;;</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;geometry_msgs::msg::Point&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].x,<sp/>1.0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].y,<sp/>2.0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].z,<sp/>3.0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].x,<sp/>1.0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].y,<sp/>2.0);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].z,<sp/>5.0);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">TEST(types,<sp/>array_4)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>p<sp/>=<sp/>point(1,2,3);let<sp/>a=[p,<sp/>point(1,2,5)];)&quot;;</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;geometry_msgs::msg::Point&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].x,<sp/>1.0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].y,<sp/>2.0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[0].z,<sp/>3.0);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].x,<sp/>1.0);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].y,<sp/>2.0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get()[1].z,<sp/>5.0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">TEST(types,<sp/>array_5)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>a<sp/>=<sp/>entity(pose(point(1,2,3),quaternion(0,0,0,1)),</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;bouy&quot;],<sp/>[point(0,1,2),<sp/>point(2,3,4),<sp/>point(3,2,3)]);</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>b<sp/>=<sp/>entity(pose(point(1,2,3),quaternion(0,0,0,1)),<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;bouy&quot;],<sp/>[point(0,1,2),<sp/>point(2,3,4),<sp/>point(3,2,3)]);</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>c<sp/>=<sp/>[a,b];</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>parser.getValue&lt;std::vector&lt;polaris::types::Entity&gt;&gt;(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(c);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>ASSERT_EQ(c.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;<ref refid="classpolaris_1_1types_1_1Entity" kindref="compound">polaris::types::Entity</ref>&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.x,<sp/>1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.y,<sp/>2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().pose.position.z,<sp/>3);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().type.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(a.get().type[0].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;bouy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().polygon.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].x,<sp/>0);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].y,<sp/>1);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[0].z,<sp/>2);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].x,<sp/>2);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].y,<sp/>3);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[1].z,<sp/>4);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].x,<sp/>3);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].y,<sp/>2);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(a.get().polygon[2].z,<sp/>3);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">TEST(types,<sp/>array_6)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>std::string<sp/>code<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(let<sp/>a=[true,<sp/>false];)&quot;;</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><ref refid="classpolaris_1_1Parser" kindref="compound">polaris::Parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(parser.evaluate(code));</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>parser.getValue&lt;std::vector&lt;bool&gt;&gt;(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(a);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get().size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get()[0],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>ASSERT_EQ(a.get()[1],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/polaris/polaris/test/test_types.cpp"/>
  </compounddef>
</doxygen>
